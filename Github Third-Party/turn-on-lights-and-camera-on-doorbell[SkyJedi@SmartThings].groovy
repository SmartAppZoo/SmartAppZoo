/* **DISCLAIMER**
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * Without limitation of the foregoing, Contributors/Regents expressly does not warrant that:
 * 1. the software will meet your requirements or expectations;
 * 2. the software or the software content will be free of bugs, errors, viruses or other defects;
 * 3. any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
 * 4. the software will be compatible with third party software;
 * 5. any errors in the software will be corrected.
 * The user assumes all responsibility for selecting the software and for the results obtained from the use of the software. The user shall bear the entire risk as to the quality and the performance of the software.
 */ 

def clientVersion() {
    return "1.1.0"
}
// Ver 1.1.0 added a camera check to leave camera on if it was on before doorbell event

/**
 * Turn on Lights and Camera on DoorBell
 *
 * Author: SmartThings, updates by SkyJedi
 * Changes Copyright SkyJedi, redistribution of any changes or modified code is not allowed without permission
 */
definition(
    name: "Turn on Lights and Camera on DoorBell",
    namespace: "SkyJedi",
    author: "skyjedi@gmail.com",
    description: "Turn on Lights and Camera on DoorBell",
    category: "Safety & Security",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/SafetyAndSecurity/App-IsItSafe.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/SafetyAndSecurity/App-IsItSafe@2x.png"
)

preferences {
        section("Doorbell Pushed") {
            input "mySwitch", "capability.switch", title: "Doorbell Pushed", required: false, multiple: true
		}
        section("Cameras and Lights settings and actions") {
            input "camera", "capability.imageCapture", title: "Which Camera to take pictures", multiple: false, required: false
            input "cameraon", "capability.switch", title: "Turn on these Camera Motion Detectors", multiple: false, required: false
			input "colorson", "capability.colorControl", title: "Turn on these lights", multiple: true, required: false
            input "switcheson", "capability.switch", title: "Turn on these switches", multiple: true, required: false
            
		}
		section("Choose light effects...")
			{
				input "color", "enum", title: "Bulb Color?", required: false, multiple:false, options: [
                    "Soft White",
					"White",
					"Daylight",
					"Warm White",
					"Red","Green","Blue","Yellow","Orange","Purple","Pink"]
				input "lightLevel", "enum", title: "Light Level?", required: true, options: ["10","20","30","40","50","60","70","80","90","100"]
			}

        section("Turn devices off after X minutes") {
        	input "timeOff", "number", title: "Minutes?", defaultValue: "5"
            }
        section("Notifications") {
            input "textMessage", "text", title: "Send this message (optional)", multiple: false, required: false
            input("recipients", "contact", title: "Send notifications to", multiple: true, required: false) {
                paragraph "You can enter multiple phone numbers to send an SMS to by separating them with a '+'. E.g. 5551234567+4447654321"
                input "sms", "phone", title: "To this phone", multiple: false, required: false
            }
        }
        section("Change Name of App (optional)") {
            label title: "Assign a name", required: false
        }
}

def installed() {
	log.debug "INSTALLED with $settings"
	subscribeToEvents()
}

def updated() {
	log.debug "UPDATED with $settings"
	unschedule()
	unsubscribe()
	subscribeToEvents()
}

private subscribeToEvents()
{
	   subscribe(mySwitch, "switch.on", doorBell)
}

def initialize() {
    // initialize switchVal
    state.switchVal = 0
    state.cameraval = 0
	}
    
def doorBell(evt) {
	if (evt.value == "on") {
		log.debug "Doorbell Pushed startSequence(evt)"
		startSequence(evt)
		}
}
def startSequence(evt) {
        sendText(sms, textMessage ? "$evt.displayName: $textMessage" : "Word")
        
        if (switcheson) {
        	log.debug "Turning on switches $switcheson"
            switcheson?.poll()
            state.switchVal = switcheson?.currentSwitch
            log.debug "Current Light Status $switcheson $state.switchVal"
            switcheson?.on()
		    }
        if (cameraon) {
        	log.debug "Turning on camera $cameraon"
            cameraon?.poll()
            state.cameraVal = cameraon?.currentSwitch
            log.debug "Current Light Status $cameraon $state.cameraVal"
            cameraon?.on()            
        	}
            
        if (colorson) {
        	log.debug "Turning on bulbs $colorson" 
            
            //colorson?.poll()
            //def colorVal = colorson?.currentSwitch
            //log.debug "Current Color Status $colorson $colorVal"
            
            def hueColor = 70
			def saturation = 100
			
            log.debug "Setting bulb color"
            
			switch(color) {
				case "White":
					hueColor = 52
					saturation = 19
					break;
				case "Daylight":
					hueColor = 53
					saturation = 91
					break;
				case "Soft White":
					hueColor = 23
					saturation = 56
					break;
				case "Warm White":
					hueColor = 20
					saturation = 80 //83
					break;
	 	 		case "Blue":
					hueColor = 70
					break;
				case "Green":
					hueColor = 39
					break;
				case "Yellow":
					hueColor = 25
					break;
				case "Orange":
					hueColor = 10
					break;
				case "Purple":
					hueColor = 75
					break;
				case "Pink":
					hueColor = 83
					break;
				case "Red":
					hueColor = 100
					break;
				}
            def newValue = [hue: hueColor, saturation: saturation, level: lightLevel as Integer ?: 100]
        	lightson?.setColor(newValue)
			log.debug "new value = $newValue"
        }

        if (camera) {
        	log.debug "Taking pictures with $camera"
        	camera?.take()
        	}
		runIn(timeOff*60, turnOff)
	}

def turnOff() {
	if (switcheson) {
        	log.debug "Turning off switches $switcheson"
            switcheson?.off()
		}
            
    if (colorson) {
        	log.debug "Turning off bulbs $colorson"
        	colorson?.off()
		}  
            
    if (cameraon) {
    		if (state.cameraVal == "on") {
            log.debug "Camera was previously on, leaving on"
            }
        	else {
            log.debug "Turning off Camera $cameraon"
            cameraon?.off()
            }
		}
}


def sendText(number, message) {
	if (sms) {
    	def phones = sms.split("\\+")
        for (phone in phones) {
            sendSms(phone, message)
        	}
    	}
        }

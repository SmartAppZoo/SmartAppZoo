/* **DISCLAIMER**
* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* Without limitation of the foregoing, Contributors/Regents expressly does not warrant that:
* 1. the software will meet your requirements or expectations;
* 2. the software or the software content will be free of bugs, errors, viruses or other defects;
* 3. any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
* 4. the software will be compatible with third party software;
* 5. any errors in the software will be corrected.
* The user assumes all responsibility for selecting the software and for the results obtained from the use of the software. The user shall bear the entire risk as to the quality and the performance of the software.
*
*  Smart Light Dimmer and Fan Switch Control Based on Button Remote
*
*  This Smart App will allow the assignment of remote/wall mount buttons to control a fan and light kit pair of switches 
*  The app is fairly rigid and expects 4 buttons to be used, single press is on and off while using the held buttons will cause
*  the lights to fade up or down.  Another single press after starting a fade function will cause the light fade to stop at the point it is at.
*  Hold on the fan control buttons will step up or down to the next speed expecting it to be a low/med/high based control
*  I am writing this for my needs with GE/Jasco fan/light dimmer switches but will customize if there is interest.
*  Copyright 2017 David Poprik
*  GNU General Public License v2 (https://www.gnu.org/licenses/gpl-2.0.txt)
*
*/

definition(
	name: "Fan with Light Kit Button Controller with Fade Child",
	namespace: "flyerdp",
	author: "flyerdp@gmail.com",
	description: "Fan with Light Kit Button Controller with Fade Child",
	category: "Convenience",
	iconUrl: "https://s3.us-east-2.amazonaws.com/mysmartthings/LightandFanButtons60x60.png",
	iconX2Url: "https://s3.us-east-2.amazonaws.com/mysmartthings/LightandFanButtons120x120.png",
	iconX3Url: "https://s3.us-east-2.amazonaws.com/mysmartthings/LightandFanButtons120x120.png"
)

preferences{
	page(name: "AppSettings")
	page(name: "OptionalSettings")
	page(name: "Restrictions")
	page(name: "SetTimeRestrictions")
}

def AppSettings() {
	dynamicPage(name: "AppSettings", title: "Button Controller for Light and Fan Switches:", install: false, uninstall: true, nextPage: "OptionalSettings") {
		section("") {
			input ("ButtonController"
				, "capability.button"
				, title: "Select 4 Button Controller"
				, required: true
				, multiple:false
			)

			input ("LightSwitch"
				, "capability.switchLevel"
				, title: "Select Light Dimmer To Control with Buttons:"
				, required: true
				, multiple:false
				)
			input ("FanSwitch"
				, "capability.switchLevel"
				, title: "Select Fan Switch To Control with Buttons:"
				, required: true
				, multiple:false
			)
		}
		remove("Delete this Remote Rule", "Delete this Rule?", "${app.label}")
	}
}

def OptionalSettings() {
	dynamicPage(name: "OptionalSettings", title: "Button Assignments:", install: false, uninstall: true, nextPage: "Restrictions") {
		section("") {
			input ("LightOnButton" 
				, "number"  
				, title: "Button to Turn Light On / Hold to Fade Up"
				, required: true
				,submitOnChange:false
				,defaultValue:1
			)
			input ("LightOffButton" 
				, "number"  
				, title: "Button to Turn Light Off / Hold to Fade Down"
				, required: true
				,submitOnChange:false
				,defaultValue:2
			)
			input ("FanOnButton" 
				, "number"  
				, title: "Button to Turn Fan On / Hold to Increase Speed"
				, required: true
				,submitOnChange:false
				,defaultValue:3
			)
			input ("FanOffButton" 
				, "number"  
				, title: "Button to Turn Fan Off / Hold to Decrease Speed"
				, required: true
				,submitOnChange:false
				,defaultValue:4
			)
		}
		def ishidden = true
		
		if (allowCustomName || debugEnabled || ruleDisabled) {
			ishidden = false
		}

		section("More Options", hideable: true, hidden: ishidden) {
			input ("allowCustomName"
				, "bool"
				, title: "Create a Custom Rule Name?"
				,defaultValue: false
				,required: false
				,submitOnChange: true
			)
			if (allowCustomName){
				debugLog(allowCustomName)
				input ("CustomName"
				, "text"
				, title: "Assign a Name:"
				,required: true
			)
			}
			input ("ruleDisabled"
				, "bool"
				, title: "Disable This Rule?"
				, required: false
				, defaultValue: false
			)
			input ("debugEnabled"
				, "bool"
				, title: "Enable Debug Logging?"
				, required: false
				, defaultValue: false
			)
		}
		remove("Delete this Remote Rule", "Delete this Rule?", "${app.label}")
	}
}

def Restrictions() {
	dynamicPage(name: "Restrictions", title: "Restrictions:", install: true, uninstall: true) {
		def TimeDescription = "Tap to Set"
		def TimePlaceholder = ""
		def schedStartTime = ""
		def schedStopTime = ""
		def TimeofDaySet = false
		def TimeofDayValue = ""

		//Validate variable settings and set global states
		if (StartAt == "Specific Time"){
			state.SpecificStartTime = SpecificStartTime
			state.StartAt = ""
		}else{
			state.SpecificStartTime = null
		}

		if (EndAt == "Specific Time"){
			state.SpecificEndTime = SpecificEndTime
			state.EndAt = ""
		}else{
			state.SpecificEndTime = null
		}
		
		if (StartAtOffSet){
			state.StartAtOffSet = StartAtOffSet
		}else{
			state.StartAtOffSet = null	
		}

		if (EndAtOffSet){
			state.EndAtOffSet = EndAtOffSet
		}else{
			state.EndAtOffSet = null
		}
		
		if (StartAt == "Sunrise" || StartAt == "Sunset"){
			state.StartAt = StartAt
			schedStartTime = "${StartAt} "
			if (state.StartAtOffSet) {
				if (state.StartAtOffSet > 0) {
					schedStartTime = schedStartTime + "+"
				}
				schedStartTime = schedStartTime + "${state.StartAtOffSet}"
			}else {state.StartAtOffSet = null}
		}else{
			state.StartAt = null
		}
		
		if (EndAt == "Sunrise" || EndAt == "Sunset"){
			state.EndAt = EndAt
			schedStopTime = "${EndAt} "
			if (state.EndAtOffSet) {
				if (state.EndAtOffSet > 0) {
					schedStopTime = schedStopTime + "+"
				}
				schedStopTime = schedStopTime + "${state.EndAtOffSet}"
			}else {state.EndAtOffSet = null}
		}else{
			state.EndAt = null
		}
		
		
		//If Specific Time Restrictions set then come up with the value to display for what is set
		if (state.SpecificStartTime){
			schedStartTime = new Date(timeToday(state.SpecificStartTime).time).format("h:mm a", location.timeZone)
		}
		if (state.SpecificEndTime){
			schedStopTime = new Date(timeToday(state.SpecificEndTime).time).format("h:mm a", location.timeZone)
		}
		
		if (schedStartTime) {
			TimeDescription = "${schedStartTime} to ${schedStopTime}"
			TimePlaceholder = TimeDescription
			TimeofDaySet = true
		}
		
		//Output Debug Variable Info if Debug Set
		if (state.debug){
			debugLog("Time of Day Set to: ${TimeDescription}")
			debugLog("Time of Day enabled: ${TimeofDaySet}")
			debugLog("StartAt Set to: ${state.StartAt}")
			debugLog("EndAt Set to: ${state.EndAt}")
			debugLog("Start Offset Set to: ${state.StartAtOffSet}")
			debugLog("EndAt Offset Set to: ${state.EndAtOffSet}")
			debugLog("Specific Start Time Set to: ${state.SpecificStartTime}")
			debugLog("Specific End Time Set to: ${state.SpecificEndTime}")
		}
		
		section("") {
			href(name: "href"
			,title: "Only during a certain time"
			,required: TimeofDaySet
			,description: "${TimeDescription}"
			,value: "${TimePlaceholder}"
			,page: "SetTimeRestrictions"
			)
			input ("allowedDays"
				,"enum"
				,title: "Only on certain days of the week:"
				,required: false
				,multiple: true
				,options: ["Monday": "Monday", "Tuesday": "Tuesday", "Wednesday": "Wednesday", "Thursday": "Thursday", "Friday": "Friday", "Saturday": "Saturday", "Sunday": "Sunday"]
			)	
			mode(title: "Set for specific mode(s)")
		}
		remove("Delete this Remote Rule", "Delete this Rule?", "${app.label}")
	}
}

def SetTimeRestrictions() {
	def StartRequired = false
	def EndRequired = false

	if(StartAt){
		EndRequired = true
	}
	if(EndAt){
		StartRequired = true
	}
	
	dynamicPage(name: "SetTimeRestrictions", title: "Only during a certain time:"){
		def StartAtOptions = ["Sunrise":"Sunrise","Sunset":"Sunset","Specific Time":"Specific Time"]
		def EndAtOptions = ["Sunrise":"Sunrise","Sunset":"Sunset","Specific Time":"Specific Time"]

		section("") {
			input ("StartAt"
				,"enum"
				,title: "Starting At:"
				,options: StartAtOptions
				,required: StartRequired
				,submitOnChange: true
			)

			if (StartAt == "Sunrise" || StartAt == "Sunset") {
				input ("StartAtOffSet"
					,"number"
					,title: "Offset in minutes (+/-)"
					,required: false
					,submitOnChange: true
				)
			}else if (StartAt == "Specific Time"){
				input (name: "SpecificStartTime"
				, type: "time"
				, title: "Enter Start Time:"
				, description: null
				, required: true
				, defaultValue: null
				, submitOnChange: true
				)
			}
			input ("EndAt"
				,"enum"
				,title: "Ending At:"
				,options: EndAtOptions
				,required: EndRequired	
				,submitOnChange: true
			)
			
			if (EndAt == "Sunrise" || EndAt == "Sunset") {
				input ("EndAtOffSet"
					,"number"
					,title: "Offset in minutes (+/-)"
					,required: false
					, submitOnChange: true
				)
			}else if (EndAt == "Specific Time") {
				input (name: "SpecificEndTime"
				, type: "time"
				, title: "Enter End Time:"
				, description: null
				, required: true
				, defaultValue: null
				, submitOnChange: true
				)
			}
		}
	}
}

def installed(){
	initialize()
	if (state.debug){ debugLog("${app.label} Initialize Complete")}

}

def updated(){
	unsubscribe()
	initialize()
		
	if (allowedDays){
		state.allowedDays = allowedDays
	}else{
		state.allowedDays = null
	}
	
	def isDisabled = ""
	if (ruleDisabled) {
		state.ruleDisabled = true
		isDisabled = "*DISABLED* - "
		if (state.debug){ debugLog("This Rule is Currently Disabled")}
	}else{
		state.ruleDisabled = false
		if (state.debug){ debugLog("This Rule is Currently Enabled")}
		isDisabled = ""
	}

	if (!allowCustomName) {
		def Switches = "${LightSwitch.displayName} and ${FanSwitch.displayName}"
		app.updateLabel("${isDisabled} ${ButtonController.displayName} Controls ${Switches}")
	}else{
		app.updateLabel("${isDisabled}${CustomName}")	
	}
	

	if (debugEnabled) {
		state.debug = true
	}else{
		state.debug = null
	}
	
//Check Sunset and Sunrise values.  If they have not been initialized then do so
	if (!state.sunsetTime) {
		state.sunsetTime = location.currentValue("sunsetTime")
	}
	
	if (!state.sunriseTime) {
		state.sunriseTime = location.currentValue("sunriseTime")
	}
	
	if (state.debug){ 
		debugLog("Set RetriggerSafetyAppliesTo to: ${state.RetriggerSafetyAppliesTo}")
		debugLog("${app.label} child Update Complete")
		debugLog("SunRise Time: ${state.sunriseTime}")
		debugLog("SunSet Time: ${state.sunsetTime}")
	}
}

def initialize(){
	state.debug = ""
	state.vChild = "1.4.9"
	state.ReTriggerSafety = null
	parent.updateVer(state.vChild)
	
	subscribe(ButtonController, "button", ButtonHandler)
	subscribe(FanSwitch, "switch", SwitchHandler)
	subscribe(LightSwitch, "switch", SwitchHandler)
	subscribe(location, "sunsetTime", sunsetTimeHandler)
	subscribe(location, "sunriseTime", sunriseTimeHandler)
	
	if (state.debug){ debugLog("${app.label} child Initialize Complete")}
}

//Handles Subscribed Button Press Events
def ButtonHandler(evt){
	if (!state.ruleDisabled) {
		if (scheduleAllowed()){
			def buttonNumber = evt.jsonData.buttonNumber
			def value = evt.value
			if (state.debug){
				debugLog "Button Handler Started"
				debugLog "button: $buttonNumber, value: $value"
			}
			//Test which button was pushed against the action for said button
			if (LightOnButton == buttonNumber) {
				if (value == "pushed"){
					unschedule()
					if (state.debug){ debugLog("Light On Button Pressed")}
					state.Fadelevel = LightSwitch.currentState("level").value.toInteger()
					if (state.debug){ debugLog("Fade Level: ${state.Fadelevel}")}
					
					if (state.LightFading == false){
						LightSwitch.on()
						state.Fadelevel = null
					}else{
						LightSwitch.setLevel(state.Fadelevel)
						runIn(1,GuaranteeFade)
					}
					state.LightFading = false
				}
				if (value == "held"){
					state.Fadelevel = null
					if (state.debug){ debugLog("Light On Button Held")}
					if (state.LightFading == false) state.curLevel = LightSwitch.currentState("level").value.toInteger()
					if (state.curLevel == null) state.curLevel = 0
					if (state.debug){ debugLog("Light Fade Up Button Pressed")
						debugLog("Light Level Before Fade Up: ${state.curLevel}")
					}
					state.LightFading = true
					state.LightFadeIncrease = true
					unschedule()
					LightFade()
				}
			}
			if (LightOffButton == buttonNumber) {
				if (value == "pushed"){
					unschedule()
					if (state.debug){ debugLog("Light Off Button Pressed")}
					state.Fadelevel = LightSwitch.currentState("level").value.toInteger()
					if (state.debug){ debugLog("Fade Level: ${state.Fadelevel}")}
					if (state.LightFading == false){
						LightSwitch.off()
						state.Fadelevel = null
					}else{
						LightSwitch.setLevel(state.Fadelevel)
						runIn(1,GuaranteeFade)
					}
					state.LightFading = false
				}
				if (value == "held" && LightSwitch.currentState("switch").value == "on"){
					state.Fadelevel = null
					if (state.debug){ debugLog("Light Off Button Held")}
					if (state.LightFading == false) state.curLevel = LightSwitch.currentState("level").value.toInteger()
					if (state.curLevel == null) state.curLevel = 0
					if (state.debug){ debugLog("Light Fade Down Button Pressed")
						debugLog("Light Level Before Fade Down: ${state.curLevel}")
					}
					state.LightFading = true
					state.LightFadeIncrease = false
					unschedule()
					LightFade()
				}
			}
			if (FanOnButton == buttonNumber) {
				if (state.debug){ debugLog("Fan On Button Pressed")}
				if (value == "pushed"){
					if (FanSwitch.currentState("switch").value == "off") {
						FanSwitch.on()
					}
				}
				if (value == "held"){
					if (state.debug){ debugLog("Fan Speed Up Button Pressed")
					debugLog("Current Fan Level: ${FanSwitch.currentState("level").value}")
					}
					FanSwitch.setLevel(FanSwitch.currentState("level").value.toInteger() + 33)
				}
			}
			if (FanOffButton == buttonNumber) {
				if (state.debug){ debugLog("Fan Off Button Pressed")}
				if (value == "pushed"){
					if (FanSwitch.currentState("switch").value == "on") {
						FanSwitch.off()
					}
				}
				if (value == "held"){
					if (state.debug){ debugLog("Fan Speed Down Button Pressed")
					debugLog("Current Fan Level: ${FanSwitch.currentState("level").value}")
					}
					FanSwitch.setLevel(FanSwitch.currentState("level").value.toInteger() - 33)
				}
			}				
		
		}else{
			if (state.debug){ debugLog("Button Handler doing nothing, button press outside of schedule!")}
		}
	}else{
		if (state.debug){ debugLog("Button Handler doing nothing, rule is inactive!")}
	}
	if (state.debug){ debugLog("Button Handler Ended")}
}

def GuaranteeFade(){
if (state.debug){ debugLog("Setting Guarantee Level: ${state.Fadelevel}")}
	if (state.Fadelevel) {
		LightSwitch.setLevel(state.Fadelevel)
	}
	state.Fadelevel = null
	state.LightFading = false
}

def LightFade(){
	if (state.debug){ debugLog("LightFade Function Running")
		debugLog("Dim Level: ${state.curLevel}")
	}
	if (state.LightFading == true){
		def interval = -2
		if (state.LightFadeIncrease == true ){
			interval = 2
		}
		if (state.LightFadeIncrease == true){
			if (state.curLevel >= 99) state.LightFading = false
		}else{
			if (state.curLevel <= 0) state.LightFading = false
		}
		def wTime = now()
		runIn(1,LightFade)
		while(now() < wTime + 800 && state.LightFading == true){
			def wTime2 = now()
			while(now() < wTime2 + 100 && state.LightFading == true){
			}
			if (state.LightFading == true && state.curLevel > 0 && state.curLevel < 100) {
				if (state.debug){ debugLog("Dim Level: ${state.curLevel}")}
				state.curLevel = state.curLevel + interval
				if (!state.Fadelevel) {
					LightSwitch.setLevel(state.curLevel)
				}else{
					LightSwitch.setLevel(state.Fadelevel)
				}
			}else{
				state.LightFading = false
			}
		}
	}
}
//Handles all subscribed switch events
def SwitchHandler(evt){
	if (state.debug){ debugLog("Switch Handler Triggered")}
	if (!state.ruleDisabled) {
		switch(evt.value)
		{
			case "on":
				state.LightFading = false
				if(evt.isPhysical()){
					if (state.debug) debugLog("Switch: ${evt.displayName} turned on Manually")
				}else{
					if (state.debug) debugLog("Switch: ${evt.displayName} turned on Automatically")
				}
				break
			case "off":
				state.LightFading = false
				if(evt.isPhysical()){
					if (state.debug) {debugLog("Switch: ${evt.displayName} turned off Manually")}
				}else{
					if (state.debug) debugLog("Switch: ${evt.displayName} turned off Automatically")
				}
				break
		}
	}else{
		if (state.debug){ debugLog("Switch Handler doing nothing, rule is inactive")}
	}
	if (state.debug){ debugLog("Switch Handler Ended")}
}

//Sunset and Sunrist Time Handler to update the TOD for Sunet/Sunrise
def sunsetTimeHandler(evt){
	if (state.debug){ debugLog("sunsetTime Handler Started")}
	state.sunsetTime = location.currentValue("sunsetTime")
	if (state.debug){ debugLog("sunsetTime set to: ${state.sunsetTime}")}
	if (state.debug){ debugLog("sunsetTime Handler Ended")}
}

def sunriseTimeHandler(){
	if (state.debug){ debugLog("sunriseTime Handler Started")}
	state.sunsriseTime = location.currentValue("sunriseTime")
	if (state.debug){ debugLog("sunriseTime set to: ${state.sunsriseTime}")}
	if (state.debug){ debugLog("sunriseTime Handler Ended")}
}

//Checks if a schedule is set and if so then are we within the schedule
def scheduleAllowed(){
	if (state.debug){ debugLog("Check if Schedule Allowed")}
	if (state.StartAt || state.EndAt || state.SpecificStartTime || state.SpecificEndTime){
		if (state.debug){ debugLog("A Time interval is specified.  Checking")}
		def df = new java.text.SimpleDateFormat("EEEE")
		df.setTimeZone(location.timeZone)
		def day = df.format(new Date())
		def fromTime = null
		def toTime = null
		def sunsetTime = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", state.sunsetTime)
		def sunriseTime = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", state.sunriseTime)
		fromTime = state.SpecificStartTime
		toTime = state.SpecificEndTime
		
		if (StartAt == "Sunrise") {
			
			if (state.StartAtOffSet){
				fromTime = new Date(sunriseTime.time + (state.StartAtOffSet * 60 * 1000))
			}else{
				fromTime = sunriseTime
			}
		}else if (StartAt == "Sunset") {
			
			if (state.StartAtOffSet){
				fromTime = new Date(sunsetTime.time + (state.StartAtOffSet * 60 * 1000))
			}else{
				fromTime = sunsetTime
			}
		}
		
		if (EndAt == "Sunrise") {
			if (state.EndAtOffSet){
				toTime = new Date(sunriseTime.time + (state.EndAtOffSet * 60 * 1000))
			}else{
				toTime = sunriseTime
			}
		}else if (EndAt == "Sunset") {
			if (state.EndAtOffSet){
				toTime = new Date(sunsetTime.time + (state.EndAtOffSet * 60 * 1000))
			}else{
				toTime = sunsetTime
			}
		}
		
		if (state.debug){
			debugLog("Current Day: ${day}")
			debugLog("Sunrise Time: ${sunriseTime}")
			debugLog("SunsetTime: ${sunsetTime}")
			debugLog("fromTime: ${fromTime}")
			debugLog("toTime: ${toTime}")
		}
		
		if(timeOfDayIsBetween(fromTime, toTime, (new Date()), location.timeZone)){
			if (state.debug){debugLog("Current Time is In Between Given Range")}
			if(state.allowedDays){
				if(state.allowedDays.contains(day)){
					if (state.debug){debugLog("Current Day is In Between Given Day Range")}
					return true
				}else{
					if (state.debug){debugLog("Current Day NOT In Between Given Day Range")}
					return false
				}
			}
			return true
		}else{
			if (state.debug){debugLog("Current Time NOT In Between Given Range")}
			return false
		}
	}else if(state.allowedDays){
		if(state.allowedDays.contains(day)){
			if (state.debug){debugLog("Current Day is In Between Given Day Range")}
			return true
		}else{
			if (state.debug){debugLog("Current Day NOT In Between Given Day Range")}
			return false
		}
	}
	return true
}



//Debug Logger
def debugLog(message){ log.debug "//${app.label} Debug\\\\: $message"}